@inject ApiService api
@inject DialogService dialog
@inject NotificationService ntf

<div class="d-flex fav-group-div">
    <RadzenFieldset Text="分组" Style="flex:0 0 33.3%">
        <div class="d-flex w-100">
            <RadzenButton Icon="add" Click="AddGroup" Style="flex:1" ButtonStyle="ButtonStyle.Primary" title="创建新分组" />
            <RadzenButton Icon="save" Click="SaveGroup" Style="flex:1;margin:0 10px" ButtonStyle="ButtonStyle.Secondary" title="保存当前分组" />
            <RadzenButton Icon="delete" Click="DeleteGroup" Style="flex:1" ButtonStyle="ButtonStyle.Danger" title="删除当前分组" />
        </div>
        <RadzenTextBox @bind-Value="@group.Name" Placeholder="分组名称" Style="width:100%;margin:10px 0" />
        <RadzenListBox @bind-Value="group" TValue="GroupRecord" Style="width:100%"
                       Data="@Groups" TextProperty="Name" Change="GroupChanged" />
    </RadzenFieldset>
    <RadzenFieldset Text="所有收藏" Style="flex:0 0 33.3%">
        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="favoriteIds"
                       Multiple="true" Data="@Favorites" TextProperty="Display" ValueProperty="Id" Style="width:100%" />
        <RadzenButton Icon="arrow_right_alt" Click="AddToGroup" Style="display:block;margin-top:10px"
                      title="添加到当前分组" />
    </RadzenFieldset>
    <RadzenFieldset Text="@group.Name" Style="flex:0 0 33.3%">
        <RadzenListBox AllowFiltering="true" FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive" @bind-Value="gIds"
                       Multiple="true" Data="@groupFavorites" TextProperty="Display" ValueProperty="Id" Style="width:100%" />
        <RadzenButton Icon="close" Click="RemoveFromGroup" Style="display:block;margin-top:10px" ButtonStyle="ButtonStyle.Danger"
                      title="从分组中移除" />
    </RadzenFieldset>
</div>

<style>
    .fav-group-div .rz-fieldset-content {
        padding: 10px;
        display: flex;
        flex-direction: column;
        align-items: flex-end;
    }
</style>

@code {
    [Parameter]
    public List<UserFavorite> Favorites { get; set; }
    [Parameter]
    public List<GroupRecord> Groups { get; set; }

    List<int> allIds;
    IEnumerable<int> favoriteIds;
    IEnumerable<int> gIds;
    GroupRecord group;
    List<UserFavorite> groupFavorites { get; set; } = new List<UserFavorite>();

    protected override void OnParametersSet()
    {
        allIds = Favorites.Select(f => f.Id).ToList();
        if (Groups.Any())
        {
            group = Groups.First();
            GroupChanged();
        }
        else
        {
            CreateNew();
            Groups.Add(group);
        }
    }

    void CreateNew()
    {
        group = new GroupRecord() { Name = "新建分组", Type = GroupType.Favorite, LineIds = new List<int>() };
    }

    void GroupChanged()
    {
        if (group != null)
        {
            groupFavorites = Favorites.Where(f => group.LineIds.Contains(f.Id)).ToList();
        }
    }

    void AddToGroup()
    {
        if (group != null && Groups.Contains(group) && !favoriteIds.IsNullOrEmpty())
        {
            group.LineIds = group.LineIds.Union(favoriteIds).ToList();
            GroupChanged();
        }
    }

    void RemoveFromGroup()
    {
        if (group != null && Groups.Contains(group) && !gIds.IsNullOrEmpty())
        {
            group.LineIds = group.LineIds.Except(gIds).ToList();
            GroupChanged();
        }
    }

    void AddGroup()
    {
        CreateNew();
        Groups.Add(group);
        GroupChanged();
    }

    async Task DeleteGroup()
    {
        if (group != null)
        {
            if (group.Id > 0)
            {
                var r = await api.DeleteGroupRecord(group.Id);
                if (r)
                {
                    ntf.Notify(NotificationSeverity.Success, "已删除");
                    Groups.Remove(group);
                }
            }
            else
            {
                Groups.Remove(group);
            }
        }
    }

    async Task SaveGroup()
    {
        if (group != null && Groups.Contains(group))
        {
            group.LineIds = group.LineIds.Intersect(allIds).ToList();
            var g = await api.AddOrUpdateGroupRecordAsync(group);
            group.Id = g.Id;
            group.UserId = g.UserId;
            ntf.Notify(NotificationSeverity.Success, "已保存");
        }
    }
}
